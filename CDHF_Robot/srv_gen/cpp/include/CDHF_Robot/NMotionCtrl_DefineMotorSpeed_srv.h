/* Auto-generated by genmsg_cpp for file /home/ubuntu/dev/ros/CDHF_Robot/srv/NMotionCtrl_DefineMotorSpeed_srv.srv */
#ifndef CDHF_ROBOT_SERVICE_NMOTIONCTRL_DEFINEMOTORSPEED_SRV_H
#define CDHF_ROBOT_SERVICE_NMOTIONCTRL_DEFINEMOTORSPEED_SRV_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace CDHF_Robot
{
template <class ContainerAllocator>
struct NMotionCtrl_DefineMotorSpeed_srvRequest_ {
  typedef NMotionCtrl_DefineMotorSpeed_srvRequest_<ContainerAllocator> Type;

  NMotionCtrl_DefineMotorSpeed_srvRequest_()
  : s16Wheel1(0)
  , s16Wheel2(0)
  , s16Wheel3(0)
  , s16Wheel4(0)
  {
  }

  NMotionCtrl_DefineMotorSpeed_srvRequest_(const ContainerAllocator& _alloc)
  : s16Wheel1(0)
  , s16Wheel2(0)
  , s16Wheel3(0)
  , s16Wheel4(0)
  {
  }

  typedef int16_t _s16Wheel1_type;
  int16_t s16Wheel1;

  typedef int16_t _s16Wheel2_type;
  int16_t s16Wheel2;

  typedef int16_t _s16Wheel3_type;
  int16_t s16Wheel3;

  typedef int16_t _s16Wheel4_type;
  int16_t s16Wheel4;


  typedef boost::shared_ptr< ::CDHF_Robot::NMotionCtrl_DefineMotorSpeed_srvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::CDHF_Robot::NMotionCtrl_DefineMotorSpeed_srvRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct NMotionCtrl_DefineMotorSpeed_srvRequest
typedef  ::CDHF_Robot::NMotionCtrl_DefineMotorSpeed_srvRequest_<std::allocator<void> > NMotionCtrl_DefineMotorSpeed_srvRequest;

typedef boost::shared_ptr< ::CDHF_Robot::NMotionCtrl_DefineMotorSpeed_srvRequest> NMotionCtrl_DefineMotorSpeed_srvRequestPtr;
typedef boost::shared_ptr< ::CDHF_Robot::NMotionCtrl_DefineMotorSpeed_srvRequest const> NMotionCtrl_DefineMotorSpeed_srvRequestConstPtr;



template <class ContainerAllocator>
struct NMotionCtrl_DefineMotorSpeed_srvResponse_ {
  typedef NMotionCtrl_DefineMotorSpeed_srvResponse_<ContainerAllocator> Type;

  NMotionCtrl_DefineMotorSpeed_srvResponse_()
  : s32ErrCode(0)
  , strErrInfo()
  , u8SysErrStatus(0)
  {
  }

  NMotionCtrl_DefineMotorSpeed_srvResponse_(const ContainerAllocator& _alloc)
  : s32ErrCode(0)
  , strErrInfo(_alloc)
  , u8SysErrStatus(0)
  {
  }

  typedef int32_t _s32ErrCode_type;
  int32_t s32ErrCode;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _strErrInfo_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  strErrInfo;

  typedef uint8_t _u8SysErrStatus_type;
  uint8_t u8SysErrStatus;


  typedef boost::shared_ptr< ::CDHF_Robot::NMotionCtrl_DefineMotorSpeed_srvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::CDHF_Robot::NMotionCtrl_DefineMotorSpeed_srvResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct NMotionCtrl_DefineMotorSpeed_srvResponse
typedef  ::CDHF_Robot::NMotionCtrl_DefineMotorSpeed_srvResponse_<std::allocator<void> > NMotionCtrl_DefineMotorSpeed_srvResponse;

typedef boost::shared_ptr< ::CDHF_Robot::NMotionCtrl_DefineMotorSpeed_srvResponse> NMotionCtrl_DefineMotorSpeed_srvResponsePtr;
typedef boost::shared_ptr< ::CDHF_Robot::NMotionCtrl_DefineMotorSpeed_srvResponse const> NMotionCtrl_DefineMotorSpeed_srvResponseConstPtr;


struct NMotionCtrl_DefineMotorSpeed_srv
{

typedef NMotionCtrl_DefineMotorSpeed_srvRequest Request;
typedef NMotionCtrl_DefineMotorSpeed_srvResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct NMotionCtrl_DefineMotorSpeed_srv
} // namespace CDHF_Robot

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::CDHF_Robot::NMotionCtrl_DefineMotorSpeed_srvRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::CDHF_Robot::NMotionCtrl_DefineMotorSpeed_srvRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::CDHF_Robot::NMotionCtrl_DefineMotorSpeed_srvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "db24e612c07d8371da9190b0b5a79458";
  }

  static const char* value(const  ::CDHF_Robot::NMotionCtrl_DefineMotorSpeed_srvRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xdb24e612c07d8371ULL;
  static const uint64_t static_value2 = 0xda9190b0b5a79458ULL;
};

template<class ContainerAllocator>
struct DataType< ::CDHF_Robot::NMotionCtrl_DefineMotorSpeed_srvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "CDHF_Robot/NMotionCtrl_DefineMotorSpeed_srvRequest";
  }

  static const char* value(const  ::CDHF_Robot::NMotionCtrl_DefineMotorSpeed_srvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::CDHF_Robot::NMotionCtrl_DefineMotorSpeed_srvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int16  s16Wheel1\n\
int16  s16Wheel2\n\
int16  s16Wheel3\n\
int16  s16Wheel4\n\
\n\
";
  }

  static const char* value(const  ::CDHF_Robot::NMotionCtrl_DefineMotorSpeed_srvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::CDHF_Robot::NMotionCtrl_DefineMotorSpeed_srvRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::CDHF_Robot::NMotionCtrl_DefineMotorSpeed_srvResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::CDHF_Robot::NMotionCtrl_DefineMotorSpeed_srvResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::CDHF_Robot::NMotionCtrl_DefineMotorSpeed_srvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "aa73ec8fc53a03fe5edb2bc5267bea65";
  }

  static const char* value(const  ::CDHF_Robot::NMotionCtrl_DefineMotorSpeed_srvResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xaa73ec8fc53a03feULL;
  static const uint64_t static_value2 = 0x5edb2bc5267bea65ULL;
};

template<class ContainerAllocator>
struct DataType< ::CDHF_Robot::NMotionCtrl_DefineMotorSpeed_srvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "CDHF_Robot/NMotionCtrl_DefineMotorSpeed_srvResponse";
  }

  static const char* value(const  ::CDHF_Robot::NMotionCtrl_DefineMotorSpeed_srvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::CDHF_Robot::NMotionCtrl_DefineMotorSpeed_srvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32  s32ErrCode\n\
string strErrInfo\n\
uint8  u8SysErrStatus\n\
\n\
\n\
";
  }

  static const char* value(const  ::CDHF_Robot::NMotionCtrl_DefineMotorSpeed_srvResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::CDHF_Robot::NMotionCtrl_DefineMotorSpeed_srvRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.s16Wheel1);
    stream.next(m.s16Wheel2);
    stream.next(m.s16Wheel3);
    stream.next(m.s16Wheel4);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct NMotionCtrl_DefineMotorSpeed_srvRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::CDHF_Robot::NMotionCtrl_DefineMotorSpeed_srvResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.s32ErrCode);
    stream.next(m.strErrInfo);
    stream.next(m.u8SysErrStatus);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct NMotionCtrl_DefineMotorSpeed_srvResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<CDHF_Robot::NMotionCtrl_DefineMotorSpeed_srv> {
  static const char* value() 
  {
    return "fec7131151353ec6f11a663d8091d4a1";
  }

  static const char* value(const CDHF_Robot::NMotionCtrl_DefineMotorSpeed_srv&) { return value(); } 
};

template<>
struct DataType<CDHF_Robot::NMotionCtrl_DefineMotorSpeed_srv> {
  static const char* value() 
  {
    return "CDHF_Robot/NMotionCtrl_DefineMotorSpeed_srv";
  }

  static const char* value(const CDHF_Robot::NMotionCtrl_DefineMotorSpeed_srv&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<CDHF_Robot::NMotionCtrl_DefineMotorSpeed_srvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fec7131151353ec6f11a663d8091d4a1";
  }

  static const char* value(const CDHF_Robot::NMotionCtrl_DefineMotorSpeed_srvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<CDHF_Robot::NMotionCtrl_DefineMotorSpeed_srvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "CDHF_Robot/NMotionCtrl_DefineMotorSpeed_srv";
  }

  static const char* value(const CDHF_Robot::NMotionCtrl_DefineMotorSpeed_srvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<CDHF_Robot::NMotionCtrl_DefineMotorSpeed_srvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fec7131151353ec6f11a663d8091d4a1";
  }

  static const char* value(const CDHF_Robot::NMotionCtrl_DefineMotorSpeed_srvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<CDHF_Robot::NMotionCtrl_DefineMotorSpeed_srvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "CDHF_Robot/NMotionCtrl_DefineMotorSpeed_srv";
  }

  static const char* value(const CDHF_Robot::NMotionCtrl_DefineMotorSpeed_srvResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // CDHF_ROBOT_SERVICE_NMOTIONCTRL_DEFINEMOTORSPEED_SRV_H

