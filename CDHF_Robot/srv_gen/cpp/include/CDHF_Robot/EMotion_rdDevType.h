/* Auto-generated by genmsg_cpp for file /home/ubuntu/dev/ros/CDHF_Robot/srv/EMotion_rdDevType.srv */
#ifndef CDHF_ROBOT_SERVICE_EMOTION_RDDEVTYPE_H
#define CDHF_ROBOT_SERVICE_EMOTION_RDDEVTYPE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace CDHF_Robot
{
template <class ContainerAllocator>
struct EMotion_rdDevTypeRequest_ {
  typedef EMotion_rdDevTypeRequest_<ContainerAllocator> Type;

  EMotion_rdDevTypeRequest_()
  {
  }

  EMotion_rdDevTypeRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::CDHF_Robot::EMotion_rdDevTypeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::CDHF_Robot::EMotion_rdDevTypeRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct EMotion_rdDevTypeRequest
typedef  ::CDHF_Robot::EMotion_rdDevTypeRequest_<std::allocator<void> > EMotion_rdDevTypeRequest;

typedef boost::shared_ptr< ::CDHF_Robot::EMotion_rdDevTypeRequest> EMotion_rdDevTypeRequestPtr;
typedef boost::shared_ptr< ::CDHF_Robot::EMotion_rdDevTypeRequest const> EMotion_rdDevTypeRequestConstPtr;



template <class ContainerAllocator>
struct EMotion_rdDevTypeResponse_ {
  typedef EMotion_rdDevTypeResponse_<ContainerAllocator> Type;

  EMotion_rdDevTypeResponse_()
  : u8DevAddr(0)
  , u8DevType(0)
  {
  }

  EMotion_rdDevTypeResponse_(const ContainerAllocator& _alloc)
  : u8DevAddr(0)
  , u8DevType(0)
  {
  }

  typedef uint8_t _u8DevAddr_type;
  uint8_t u8DevAddr;

  typedef uint8_t _u8DevType_type;
  uint8_t u8DevType;


  typedef boost::shared_ptr< ::CDHF_Robot::EMotion_rdDevTypeResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::CDHF_Robot::EMotion_rdDevTypeResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct EMotion_rdDevTypeResponse
typedef  ::CDHF_Robot::EMotion_rdDevTypeResponse_<std::allocator<void> > EMotion_rdDevTypeResponse;

typedef boost::shared_ptr< ::CDHF_Robot::EMotion_rdDevTypeResponse> EMotion_rdDevTypeResponsePtr;
typedef boost::shared_ptr< ::CDHF_Robot::EMotion_rdDevTypeResponse const> EMotion_rdDevTypeResponseConstPtr;


struct EMotion_rdDevType
{

typedef EMotion_rdDevTypeRequest Request;
typedef EMotion_rdDevTypeResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct EMotion_rdDevType
} // namespace CDHF_Robot

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::CDHF_Robot::EMotion_rdDevTypeRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::CDHF_Robot::EMotion_rdDevTypeRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::CDHF_Robot::EMotion_rdDevTypeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::CDHF_Robot::EMotion_rdDevTypeRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::CDHF_Robot::EMotion_rdDevTypeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "CDHF_Robot/EMotion_rdDevTypeRequest";
  }

  static const char* value(const  ::CDHF_Robot::EMotion_rdDevTypeRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::CDHF_Robot::EMotion_rdDevTypeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::CDHF_Robot::EMotion_rdDevTypeRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::CDHF_Robot::EMotion_rdDevTypeRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::CDHF_Robot::EMotion_rdDevTypeResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::CDHF_Robot::EMotion_rdDevTypeResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::CDHF_Robot::EMotion_rdDevTypeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1a56c2ab9c7c9a056a5b3f503f5a4eff";
  }

  static const char* value(const  ::CDHF_Robot::EMotion_rdDevTypeResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1a56c2ab9c7c9a05ULL;
  static const uint64_t static_value2 = 0x6a5b3f503f5a4effULL;
};

template<class ContainerAllocator>
struct DataType< ::CDHF_Robot::EMotion_rdDevTypeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "CDHF_Robot/EMotion_rdDevTypeResponse";
  }

  static const char* value(const  ::CDHF_Robot::EMotion_rdDevTypeResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::CDHF_Robot::EMotion_rdDevTypeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 u8DevAddr\n\
uint8 u8DevType\n\
\n\
\n\
";
  }

  static const char* value(const  ::CDHF_Robot::EMotion_rdDevTypeResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::CDHF_Robot::EMotion_rdDevTypeResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::CDHF_Robot::EMotion_rdDevTypeRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct EMotion_rdDevTypeRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::CDHF_Robot::EMotion_rdDevTypeResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.u8DevAddr);
    stream.next(m.u8DevType);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct EMotion_rdDevTypeResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<CDHF_Robot::EMotion_rdDevType> {
  static const char* value() 
  {
    return "1a56c2ab9c7c9a056a5b3f503f5a4eff";
  }

  static const char* value(const CDHF_Robot::EMotion_rdDevType&) { return value(); } 
};

template<>
struct DataType<CDHF_Robot::EMotion_rdDevType> {
  static const char* value() 
  {
    return "CDHF_Robot/EMotion_rdDevType";
  }

  static const char* value(const CDHF_Robot::EMotion_rdDevType&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<CDHF_Robot::EMotion_rdDevTypeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1a56c2ab9c7c9a056a5b3f503f5a4eff";
  }

  static const char* value(const CDHF_Robot::EMotion_rdDevTypeRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<CDHF_Robot::EMotion_rdDevTypeRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "CDHF_Robot/EMotion_rdDevType";
  }

  static const char* value(const CDHF_Robot::EMotion_rdDevTypeRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<CDHF_Robot::EMotion_rdDevTypeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1a56c2ab9c7c9a056a5b3f503f5a4eff";
  }

  static const char* value(const CDHF_Robot::EMotion_rdDevTypeResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<CDHF_Robot::EMotion_rdDevTypeResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "CDHF_Robot/EMotion_rdDevType";
  }

  static const char* value(const CDHF_Robot::EMotion_rdDevTypeResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // CDHF_ROBOT_SERVICE_EMOTION_RDDEVTYPE_H

