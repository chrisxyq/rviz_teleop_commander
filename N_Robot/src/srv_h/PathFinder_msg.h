// Generated by gencpp from file N_Robot/PathFinder_msg.msg
// DO NOT EDIT!


#ifndef N_ROBOT_MESSAGE_PATHFINDER_MSG_H
#define N_ROBOT_MESSAGE_PATHFINDER_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace N_Robot
{
template <class ContainerAllocator>
struct PathFinder_msg_
{
  typedef PathFinder_msg_<ContainerAllocator> Type;

  PathFinder_msg_()
    : bValid(false)
    , i16JOY1X(0)
    , i16JOY1Y(0)
    , i16JOY1Z(0)
    , i16JOY2X(0)
    , i16JOY2Y(0)
    , i16JOY3X(0)
    , i16JOY3Y(0)
    , u16POTA(0)
    , u16POTB(0)
    , u8BAND(0)
    , i8ENCA(0)
    , i8ENCB(0)
    , u16Button(0)  {
    }
  PathFinder_msg_(const ContainerAllocator& _alloc)
    : bValid(false)
    , i16JOY1X(0)
    , i16JOY1Y(0)
    , i16JOY1Z(0)
    , i16JOY2X(0)
    , i16JOY2Y(0)
    , i16JOY3X(0)
    , i16JOY3Y(0)
    , u16POTA(0)
    , u16POTB(0)
    , u8BAND(0)
    , i8ENCA(0)
    , i8ENCB(0)
    , u16Button(0)  {
  (void)_alloc;
    }



   typedef uint8_t _bValid_type;
  _bValid_type bValid;

   typedef int16_t _i16JOY1X_type;
  _i16JOY1X_type i16JOY1X;

   typedef int16_t _i16JOY1Y_type;
  _i16JOY1Y_type i16JOY1Y;

   typedef int16_t _i16JOY1Z_type;
  _i16JOY1Z_type i16JOY1Z;

   typedef int16_t _i16JOY2X_type;
  _i16JOY2X_type i16JOY2X;

   typedef int16_t _i16JOY2Y_type;
  _i16JOY2Y_type i16JOY2Y;

   typedef int16_t _i16JOY3X_type;
  _i16JOY3X_type i16JOY3X;

   typedef int16_t _i16JOY3Y_type;
  _i16JOY3Y_type i16JOY3Y;

   typedef uint16_t _u16POTA_type;
  _u16POTA_type u16POTA;

   typedef uint16_t _u16POTB_type;
  _u16POTB_type u16POTB;

   typedef uint8_t _u8BAND_type;
  _u8BAND_type u8BAND;

   typedef int8_t _i8ENCA_type;
  _i8ENCA_type i8ENCA;

   typedef int8_t _i8ENCB_type;
  _i8ENCB_type i8ENCB;

   typedef uint16_t _u16Button_type;
  _u16Button_type u16Button;




  typedef boost::shared_ptr< ::N_Robot::PathFinder_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::N_Robot::PathFinder_msg_<ContainerAllocator> const> ConstPtr;

}; // struct PathFinder_msg_

typedef ::N_Robot::PathFinder_msg_<std::allocator<void> > PathFinder_msg;

typedef boost::shared_ptr< ::N_Robot::PathFinder_msg > PathFinder_msgPtr;
typedef boost::shared_ptr< ::N_Robot::PathFinder_msg const> PathFinder_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::N_Robot::PathFinder_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::N_Robot::PathFinder_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace N_Robot

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'N_Robot': ['/home/cp3/catkin_ws/src/N_Robot/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::N_Robot::PathFinder_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::N_Robot::PathFinder_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::N_Robot::PathFinder_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::N_Robot::PathFinder_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::N_Robot::PathFinder_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::N_Robot::PathFinder_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::N_Robot::PathFinder_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a0b961ff8f78bdde7ce47c9a5aab32e2";
  }

  static const char* value(const ::N_Robot::PathFinder_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa0b961ff8f78bddeULL;
  static const uint64_t static_value2 = 0x7ce47c9a5aab32e2ULL;
};

template<class ContainerAllocator>
struct DataType< ::N_Robot::PathFinder_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "N_Robot/PathFinder_msg";
  }

  static const char* value(const ::N_Robot::PathFinder_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::N_Robot::PathFinder_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Remote CTRLR VALID BIT\n\
bool bValid\n\
#JOY1\n\
int16 i16JOY1X\n\
int16 i16JOY1Y\n\
int16 i16JOY1Z\n\
#JOY2\n\
int16 i16JOY2X\n\
int16 i16JOY2Y\n\
#JOY3\n\
int16 i16JOY3X\n\
int16 i16JOY3Y\n\
#POT A/B\n\
uint16 u16POTA\n\
uint16 u16POTB\n\
#BAND A/B\n\
uint8 u8BAND\n\
#ENC A/B\n\
int8 i8ENCA\n\
int8 i8ENCB\n\
#TOG & BUTTON\n\
uint16 u16Button\n\
\n\
";
  }

  static const char* value(const ::N_Robot::PathFinder_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::N_Robot::PathFinder_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.bValid);
      stream.next(m.i16JOY1X);
      stream.next(m.i16JOY1Y);
      stream.next(m.i16JOY1Z);
      stream.next(m.i16JOY2X);
      stream.next(m.i16JOY2Y);
      stream.next(m.i16JOY3X);
      stream.next(m.i16JOY3Y);
      stream.next(m.u16POTA);
      stream.next(m.u16POTB);
      stream.next(m.u8BAND);
      stream.next(m.i8ENCA);
      stream.next(m.i8ENCB);
      stream.next(m.u16Button);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PathFinder_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::N_Robot::PathFinder_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::N_Robot::PathFinder_msg_<ContainerAllocator>& v)
  {
    s << indent << "bValid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bValid);
    s << indent << "i16JOY1X: ";
    Printer<int16_t>::stream(s, indent + "  ", v.i16JOY1X);
    s << indent << "i16JOY1Y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.i16JOY1Y);
    s << indent << "i16JOY1Z: ";
    Printer<int16_t>::stream(s, indent + "  ", v.i16JOY1Z);
    s << indent << "i16JOY2X: ";
    Printer<int16_t>::stream(s, indent + "  ", v.i16JOY2X);
    s << indent << "i16JOY2Y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.i16JOY2Y);
    s << indent << "i16JOY3X: ";
    Printer<int16_t>::stream(s, indent + "  ", v.i16JOY3X);
    s << indent << "i16JOY3Y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.i16JOY3Y);
    s << indent << "u16POTA: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.u16POTA);
    s << indent << "u16POTB: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.u16POTB);
    s << indent << "u8BAND: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.u8BAND);
    s << indent << "i8ENCA: ";
    Printer<int8_t>::stream(s, indent + "  ", v.i8ENCA);
    s << indent << "i8ENCB: ";
    Printer<int8_t>::stream(s, indent + "  ", v.i8ENCB);
    s << indent << "u16Button: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.u16Button);
  }
};

} // namespace message_operations
} // namespace ros

#endif // N_ROBOT_MESSAGE_PATHFINDER_MSG_H
