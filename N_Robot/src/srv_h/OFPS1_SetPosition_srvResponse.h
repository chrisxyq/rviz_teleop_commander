// Generated by gencpp from file N_Robot/OFPS1_SetPosition_srvResponse.msg
// DO NOT EDIT!


#ifndef N_ROBOT_MESSAGE_OFPS1_SETPOSITION_SRVRESPONSE_H
#define N_ROBOT_MESSAGE_OFPS1_SETPOSITION_SRVRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace N_Robot
{
template <class ContainerAllocator>
struct OFPS1_SetPosition_srvResponse_
{
  typedef OFPS1_SetPosition_srvResponse_<ContainerAllocator> Type;

  OFPS1_SetPosition_srvResponse_()
    : s32ErrCode(0)
    , strErrInfo()  {
    }
  OFPS1_SetPosition_srvResponse_(const ContainerAllocator& _alloc)
    : s32ErrCode(0)
    , strErrInfo(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _s32ErrCode_type;
  _s32ErrCode_type s32ErrCode;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _strErrInfo_type;
  _strErrInfo_type strErrInfo;




  typedef boost::shared_ptr< ::N_Robot::OFPS1_SetPosition_srvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::N_Robot::OFPS1_SetPosition_srvResponse_<ContainerAllocator> const> ConstPtr;

}; // struct OFPS1_SetPosition_srvResponse_

typedef ::N_Robot::OFPS1_SetPosition_srvResponse_<std::allocator<void> > OFPS1_SetPosition_srvResponse;

typedef boost::shared_ptr< ::N_Robot::OFPS1_SetPosition_srvResponse > OFPS1_SetPosition_srvResponsePtr;
typedef boost::shared_ptr< ::N_Robot::OFPS1_SetPosition_srvResponse const> OFPS1_SetPosition_srvResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::N_Robot::OFPS1_SetPosition_srvResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::N_Robot::OFPS1_SetPosition_srvResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace N_Robot

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'N_Robot': ['/home/cp3/catkin_ws/src/N_Robot/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::N_Robot::OFPS1_SetPosition_srvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::N_Robot::OFPS1_SetPosition_srvResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::N_Robot::OFPS1_SetPosition_srvResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::N_Robot::OFPS1_SetPosition_srvResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::N_Robot::OFPS1_SetPosition_srvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::N_Robot::OFPS1_SetPosition_srvResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::N_Robot::OFPS1_SetPosition_srvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2cbb63f69963641e39b44412655d5578";
  }

  static const char* value(const ::N_Robot::OFPS1_SetPosition_srvResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2cbb63f69963641eULL;
  static const uint64_t static_value2 = 0x39b44412655d5578ULL;
};

template<class ContainerAllocator>
struct DataType< ::N_Robot::OFPS1_SetPosition_srvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "N_Robot/OFPS1_SetPosition_srvResponse";
  }

  static const char* value(const ::N_Robot::OFPS1_SetPosition_srvResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::N_Robot::OFPS1_SetPosition_srvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32  s32ErrCode\n\
string strErrInfo\n\
\n\
\n\
";
  }

  static const char* value(const ::N_Robot::OFPS1_SetPosition_srvResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::N_Robot::OFPS1_SetPosition_srvResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.s32ErrCode);
      stream.next(m.strErrInfo);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OFPS1_SetPosition_srvResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::N_Robot::OFPS1_SetPosition_srvResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::N_Robot::OFPS1_SetPosition_srvResponse_<ContainerAllocator>& v)
  {
    s << indent << "s32ErrCode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.s32ErrCode);
    s << indent << "strErrInfo: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.strErrInfo);
  }
};

} // namespace message_operations
} // namespace ros

#endif // N_ROBOT_MESSAGE_OFPS1_SETPOSITION_SRVRESPONSE_H
