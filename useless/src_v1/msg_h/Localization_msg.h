// Generated by gencpp from file navigator_q2/Localization_msg.msg
// DO NOT EDIT!


#ifndef NAVIGATOR_Q2_MESSAGE_LOCALIZATION_MSG_H
#define NAVIGATOR_Q2_MESSAGE_LOCALIZATION_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace navigator_q2
{
template <class ContainerAllocator>
struct Localization_msg_
{
  typedef Localization_msg_<ContainerAllocator> Type;

  Localization_msg_()
    : dMaxWeight(0.0)  {
    }
  Localization_msg_(const ContainerAllocator& _alloc)
    : dMaxWeight(0.0)  {
  (void)_alloc;
    }



   typedef double _dMaxWeight_type;
  _dMaxWeight_type dMaxWeight;




  typedef boost::shared_ptr< ::navigator_q2::Localization_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::navigator_q2::Localization_msg_<ContainerAllocator> const> ConstPtr;

}; // struct Localization_msg_

typedef ::navigator_q2::Localization_msg_<std::allocator<void> > Localization_msg;

typedef boost::shared_ptr< ::navigator_q2::Localization_msg > Localization_msgPtr;
typedef boost::shared_ptr< ::navigator_q2::Localization_msg const> Localization_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::navigator_q2::Localization_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::navigator_q2::Localization_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace navigator_q2

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'navigator_q2': ['/home/cp3/catkin_ws/src/navigator_q2/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::navigator_q2::Localization_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::navigator_q2::Localization_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::navigator_q2::Localization_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::navigator_q2::Localization_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::navigator_q2::Localization_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::navigator_q2::Localization_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::navigator_q2::Localization_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0dd53bf4fd6c6d6dbeb91b37b927cabd";
  }

  static const char* value(const ::navigator_q2::Localization_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0dd53bf4fd6c6d6dULL;
  static const uint64_t static_value2 = 0xbeb91b37b927cabdULL;
};

template<class ContainerAllocator>
struct DataType< ::navigator_q2::Localization_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "navigator_q2/Localization_msg";
  }

  static const char* value(const ::navigator_q2::Localization_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::navigator_q2::Localization_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Localization info\n\
float64 dMaxWeight\n\
\n\
";
  }

  static const char* value(const ::navigator_q2::Localization_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::navigator_q2::Localization_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dMaxWeight);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Localization_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::navigator_q2::Localization_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::navigator_q2::Localization_msg_<ContainerAllocator>& v)
  {
    s << indent << "dMaxWeight: ";
    Printer<double>::stream(s, indent + "  ", v.dMaxWeight);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAVIGATOR_Q2_MESSAGE_LOCALIZATION_MSG_H
