/* Auto-generated by genmsg_cpp for file /home/ubuntu/dev/ros/N_Robot/msg/CyberJoy_msg.msg */
#ifndef N_ROBOT_MESSAGE_CYBERJOY_MSG_H
#define N_ROBOT_MESSAGE_CYBERJOY_MSG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace N_Robot
{
template <class ContainerAllocator>
struct CyberJoy_msg_ {
  typedef CyberJoy_msg_<ContainerAllocator> Type;

  CyberJoy_msg_()
  : bValid(false)
  , i16VelY(0)
  , i16VelX(0)
  , i16VelR(0)
  , i16VelR2(0)
  {
  }

  CyberJoy_msg_(const ContainerAllocator& _alloc)
  : bValid(false)
  , i16VelY(0)
  , i16VelX(0)
  , i16VelR(0)
  , i16VelR2(0)
  {
  }

  typedef uint8_t _bValid_type;
  uint8_t bValid;

  typedef int16_t _i16VelY_type;
  int16_t i16VelY;

  typedef int16_t _i16VelX_type;
  int16_t i16VelX;

  typedef int16_t _i16VelR_type;
  int16_t i16VelR;

  typedef int16_t _i16VelR2_type;
  int16_t i16VelR2;


  typedef boost::shared_ptr< ::N_Robot::CyberJoy_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::N_Robot::CyberJoy_msg_<ContainerAllocator>  const> ConstPtr;
}; // struct CyberJoy_msg
typedef  ::N_Robot::CyberJoy_msg_<std::allocator<void> > CyberJoy_msg;

typedef boost::shared_ptr< ::N_Robot::CyberJoy_msg> CyberJoy_msgPtr;
typedef boost::shared_ptr< ::N_Robot::CyberJoy_msg const> CyberJoy_msgConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::N_Robot::CyberJoy_msg_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::N_Robot::CyberJoy_msg_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace N_Robot

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::N_Robot::CyberJoy_msg_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::N_Robot::CyberJoy_msg_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::N_Robot::CyberJoy_msg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f0201e833065447e9b7599cb5c15e657";
  }

  static const char* value(const  ::N_Robot::CyberJoy_msg_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf0201e833065447eULL;
  static const uint64_t static_value2 = 0x9b7599cb5c15e657ULL;
};

template<class ContainerAllocator>
struct DataType< ::N_Robot::CyberJoy_msg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "N_Robot/CyberJoy_msg";
  }

  static const char* value(const  ::N_Robot::CyberJoy_msg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::N_Robot::CyberJoy_msg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "#Cyber Joy valid info\n\
bool bValid\n\
#Velocity info\n\
int16 i16VelY\n\
int16 i16VelX\n\
int16 i16VelR\n\
int16 i16VelR2\n\
\n\
\n\
";
  }

  static const char* value(const  ::N_Robot::CyberJoy_msg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::N_Robot::CyberJoy_msg_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::N_Robot::CyberJoy_msg_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.bValid);
    stream.next(m.i16VelY);
    stream.next(m.i16VelX);
    stream.next(m.i16VelR);
    stream.next(m.i16VelR2);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CyberJoy_msg_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::N_Robot::CyberJoy_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::N_Robot::CyberJoy_msg_<ContainerAllocator> & v) 
  {
    s << indent << "bValid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bValid);
    s << indent << "i16VelY: ";
    Printer<int16_t>::stream(s, indent + "  ", v.i16VelY);
    s << indent << "i16VelX: ";
    Printer<int16_t>::stream(s, indent + "  ", v.i16VelX);
    s << indent << "i16VelR: ";
    Printer<int16_t>::stream(s, indent + "  ", v.i16VelR);
    s << indent << "i16VelR2: ";
    Printer<int16_t>::stream(s, indent + "  ", v.i16VelR2);
  }
};


} // namespace message_operations
} // namespace ros

#endif // N_ROBOT_MESSAGE_CYBERJOY_MSG_H

