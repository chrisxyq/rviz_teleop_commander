// Generated by gencpp from file N_Robot/NMotionCtrl_SMATPositionMode_srvRequest.msg
// DO NOT EDIT!


#ifndef N_ROBOT_MESSAGE_NMOTIONCTRL_SMATPOSITIONMODE_SRVREQUEST_H
#define N_ROBOT_MESSAGE_NMOTIONCTRL_SMATPOSITIONMODE_SRVREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace N_Robot
{
template <class ContainerAllocator>
struct NMotionCtrl_SMATPositionMode_srvRequest_
{
  typedef NMotionCtrl_SMATPositionMode_srvRequest_<ContainerAllocator> Type;

  NMotionCtrl_SMATPositionMode_srvRequest_()
    : s16X(0)
    , s16Y(0)
    , u16LinearVelocity(0)
    , s16AngularVelocity(0)  {
    }
  NMotionCtrl_SMATPositionMode_srvRequest_(const ContainerAllocator& _alloc)
    : s16X(0)
    , s16Y(0)
    , u16LinearVelocity(0)
    , s16AngularVelocity(0)  {
  (void)_alloc;
    }



   typedef int16_t _s16X_type;
  _s16X_type s16X;

   typedef int16_t _s16Y_type;
  _s16Y_type s16Y;

   typedef uint16_t _u16LinearVelocity_type;
  _u16LinearVelocity_type u16LinearVelocity;

   typedef int16_t _s16AngularVelocity_type;
  _s16AngularVelocity_type s16AngularVelocity;




  typedef boost::shared_ptr< ::N_Robot::NMotionCtrl_SMATPositionMode_srvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::N_Robot::NMotionCtrl_SMATPositionMode_srvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct NMotionCtrl_SMATPositionMode_srvRequest_

typedef ::N_Robot::NMotionCtrl_SMATPositionMode_srvRequest_<std::allocator<void> > NMotionCtrl_SMATPositionMode_srvRequest;

typedef boost::shared_ptr< ::N_Robot::NMotionCtrl_SMATPositionMode_srvRequest > NMotionCtrl_SMATPositionMode_srvRequestPtr;
typedef boost::shared_ptr< ::N_Robot::NMotionCtrl_SMATPositionMode_srvRequest const> NMotionCtrl_SMATPositionMode_srvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::N_Robot::NMotionCtrl_SMATPositionMode_srvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::N_Robot::NMotionCtrl_SMATPositionMode_srvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace N_Robot

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'N_Robot': ['/home/cp3/catkin_ws/src/N_Robot/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::N_Robot::NMotionCtrl_SMATPositionMode_srvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::N_Robot::NMotionCtrl_SMATPositionMode_srvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::N_Robot::NMotionCtrl_SMATPositionMode_srvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::N_Robot::NMotionCtrl_SMATPositionMode_srvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::N_Robot::NMotionCtrl_SMATPositionMode_srvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::N_Robot::NMotionCtrl_SMATPositionMode_srvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::N_Robot::NMotionCtrl_SMATPositionMode_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "58bac0db7b9b0bfcb418b2e7f780bd65";
  }

  static const char* value(const ::N_Robot::NMotionCtrl_SMATPositionMode_srvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x58bac0db7b9b0bfcULL;
  static const uint64_t static_value2 = 0xb418b2e7f780bd65ULL;
};

template<class ContainerAllocator>
struct DataType< ::N_Robot::NMotionCtrl_SMATPositionMode_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "N_Robot/NMotionCtrl_SMATPositionMode_srvRequest";
  }

  static const char* value(const ::N_Robot::NMotionCtrl_SMATPositionMode_srvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::N_Robot::NMotionCtrl_SMATPositionMode_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16  s16X\n\
int16  s16Y\n\
uint16 u16LinearVelocity\n\
int16  s16AngularVelocity\n\
";
  }

  static const char* value(const ::N_Robot::NMotionCtrl_SMATPositionMode_srvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::N_Robot::NMotionCtrl_SMATPositionMode_srvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.s16X);
      stream.next(m.s16Y);
      stream.next(m.u16LinearVelocity);
      stream.next(m.s16AngularVelocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NMotionCtrl_SMATPositionMode_srvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::N_Robot::NMotionCtrl_SMATPositionMode_srvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::N_Robot::NMotionCtrl_SMATPositionMode_srvRequest_<ContainerAllocator>& v)
  {
    s << indent << "s16X: ";
    Printer<int16_t>::stream(s, indent + "  ", v.s16X);
    s << indent << "s16Y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.s16Y);
    s << indent << "u16LinearVelocity: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.u16LinearVelocity);
    s << indent << "s16AngularVelocity: ";
    Printer<int16_t>::stream(s, indent + "  ", v.s16AngularVelocity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // N_ROBOT_MESSAGE_NMOTIONCTRL_SMATPOSITIONMODE_SRVREQUEST_H
