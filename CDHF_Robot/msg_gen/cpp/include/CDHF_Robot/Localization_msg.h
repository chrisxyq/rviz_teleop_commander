/* Auto-generated by genmsg_cpp for file /home/ubuntu/dev/ros/CDHF_Robot/msg/Localization_msg.msg */
#ifndef CDHF_ROBOT_MESSAGE_LOCALIZATION_MSG_H
#define CDHF_ROBOT_MESSAGE_LOCALIZATION_MSG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace CDHF_Robot
{
template <class ContainerAllocator>
struct Localization_msg_ {
  typedef Localization_msg_<ContainerAllocator> Type;

  Localization_msg_()
  : dMaxWeight(0.0)
  {
  }

  Localization_msg_(const ContainerAllocator& _alloc)
  : dMaxWeight(0.0)
  {
  }

  typedef double _dMaxWeight_type;
  double dMaxWeight;


  typedef boost::shared_ptr< ::CDHF_Robot::Localization_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::CDHF_Robot::Localization_msg_<ContainerAllocator>  const> ConstPtr;
}; // struct Localization_msg
typedef  ::CDHF_Robot::Localization_msg_<std::allocator<void> > Localization_msg;

typedef boost::shared_ptr< ::CDHF_Robot::Localization_msg> Localization_msgPtr;
typedef boost::shared_ptr< ::CDHF_Robot::Localization_msg const> Localization_msgConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::CDHF_Robot::Localization_msg_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::CDHF_Robot::Localization_msg_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace CDHF_Robot

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::CDHF_Robot::Localization_msg_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::CDHF_Robot::Localization_msg_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::CDHF_Robot::Localization_msg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "0dd53bf4fd6c6d6dbeb91b37b927cabd";
  }

  static const char* value(const  ::CDHF_Robot::Localization_msg_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x0dd53bf4fd6c6d6dULL;
  static const uint64_t static_value2 = 0xbeb91b37b927cabdULL;
};

template<class ContainerAllocator>
struct DataType< ::CDHF_Robot::Localization_msg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "CDHF_Robot/Localization_msg";
  }

  static const char* value(const  ::CDHF_Robot::Localization_msg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::CDHF_Robot::Localization_msg_<ContainerAllocator> > {
  static const char* value() 
  {
    return "#Localization info\n\
float64 dMaxWeight\n\
\n\
\n\
";
  }

  static const char* value(const  ::CDHF_Robot::Localization_msg_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::CDHF_Robot::Localization_msg_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::CDHF_Robot::Localization_msg_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.dMaxWeight);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Localization_msg_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::CDHF_Robot::Localization_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::CDHF_Robot::Localization_msg_<ContainerAllocator> & v) 
  {
    s << indent << "dMaxWeight: ";
    Printer<double>::stream(s, indent + "  ", v.dMaxWeight);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CDHF_ROBOT_MESSAGE_LOCALIZATION_MSG_H

