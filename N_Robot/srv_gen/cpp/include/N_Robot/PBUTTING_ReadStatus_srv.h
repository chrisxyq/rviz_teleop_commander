/* Auto-generated by genmsg_cpp for file /home/ubuntu/dev/ros/N_Robot/srv/PBUTTING_ReadStatus_srv.srv */
#ifndef N_ROBOT_SERVICE_PBUTTING_READSTATUS_SRV_H
#define N_ROBOT_SERVICE_PBUTTING_READSTATUS_SRV_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace N_Robot
{
template <class ContainerAllocator>
struct PBUTTING_ReadStatus_srvRequest_ {
  typedef PBUTTING_ReadStatus_srvRequest_<ContainerAllocator> Type;

  PBUTTING_ReadStatus_srvRequest_()
  {
  }

  PBUTTING_ReadStatus_srvRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::N_Robot::PBUTTING_ReadStatus_srvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::N_Robot::PBUTTING_ReadStatus_srvRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct PBUTTING_ReadStatus_srvRequest
typedef  ::N_Robot::PBUTTING_ReadStatus_srvRequest_<std::allocator<void> > PBUTTING_ReadStatus_srvRequest;

typedef boost::shared_ptr< ::N_Robot::PBUTTING_ReadStatus_srvRequest> PBUTTING_ReadStatus_srvRequestPtr;
typedef boost::shared_ptr< ::N_Robot::PBUTTING_ReadStatus_srvRequest const> PBUTTING_ReadStatus_srvRequestConstPtr;



template <class ContainerAllocator>
struct PBUTTING_ReadStatus_srvResponse_ {
  typedef PBUTTING_ReadStatus_srvResponse_<ContainerAllocator> Type;

  PBUTTING_ReadStatus_srvResponse_()
  : s32ErrCode(0)
  , strErrInfo()
  , u8Switch(0)
  , f32Position(0.0)
  {
  }

  PBUTTING_ReadStatus_srvResponse_(const ContainerAllocator& _alloc)
  : s32ErrCode(0)
  , strErrInfo(_alloc)
  , u8Switch(0)
  , f32Position(0.0)
  {
  }

  typedef int32_t _s32ErrCode_type;
  int32_t s32ErrCode;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _strErrInfo_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  strErrInfo;

  typedef uint8_t _u8Switch_type;
  uint8_t u8Switch;

  typedef float _f32Position_type;
  float f32Position;


  typedef boost::shared_ptr< ::N_Robot::PBUTTING_ReadStatus_srvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::N_Robot::PBUTTING_ReadStatus_srvResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct PBUTTING_ReadStatus_srvResponse
typedef  ::N_Robot::PBUTTING_ReadStatus_srvResponse_<std::allocator<void> > PBUTTING_ReadStatus_srvResponse;

typedef boost::shared_ptr< ::N_Robot::PBUTTING_ReadStatus_srvResponse> PBUTTING_ReadStatus_srvResponsePtr;
typedef boost::shared_ptr< ::N_Robot::PBUTTING_ReadStatus_srvResponse const> PBUTTING_ReadStatus_srvResponseConstPtr;


struct PBUTTING_ReadStatus_srv
{

typedef PBUTTING_ReadStatus_srvRequest Request;
typedef PBUTTING_ReadStatus_srvResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct PBUTTING_ReadStatus_srv
} // namespace N_Robot

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::N_Robot::PBUTTING_ReadStatus_srvRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::N_Robot::PBUTTING_ReadStatus_srvRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::N_Robot::PBUTTING_ReadStatus_srvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::N_Robot::PBUTTING_ReadStatus_srvRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::N_Robot::PBUTTING_ReadStatus_srvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "N_Robot/PBUTTING_ReadStatus_srvRequest";
  }

  static const char* value(const  ::N_Robot::PBUTTING_ReadStatus_srvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::N_Robot::PBUTTING_ReadStatus_srvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::N_Robot::PBUTTING_ReadStatus_srvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::N_Robot::PBUTTING_ReadStatus_srvRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::N_Robot::PBUTTING_ReadStatus_srvResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::N_Robot::PBUTTING_ReadStatus_srvResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::N_Robot::PBUTTING_ReadStatus_srvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3713bac249ff5edea25dc7f5bbaac80b";
  }

  static const char* value(const  ::N_Robot::PBUTTING_ReadStatus_srvResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3713bac249ff5edeULL;
  static const uint64_t static_value2 = 0xa25dc7f5bbaac80bULL;
};

template<class ContainerAllocator>
struct DataType< ::N_Robot::PBUTTING_ReadStatus_srvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "N_Robot/PBUTTING_ReadStatus_srvResponse";
  }

  static const char* value(const  ::N_Robot::PBUTTING_ReadStatus_srvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::N_Robot::PBUTTING_ReadStatus_srvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32  s32ErrCode\n\
string strErrInfo\n\
uint8  u8Switch\n\
float32 f32Position\n\
\n\
\n\
\n\
";
  }

  static const char* value(const  ::N_Robot::PBUTTING_ReadStatus_srvResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::N_Robot::PBUTTING_ReadStatus_srvRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PBUTTING_ReadStatus_srvRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::N_Robot::PBUTTING_ReadStatus_srvResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.s32ErrCode);
    stream.next(m.strErrInfo);
    stream.next(m.u8Switch);
    stream.next(m.f32Position);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PBUTTING_ReadStatus_srvResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<N_Robot::PBUTTING_ReadStatus_srv> {
  static const char* value() 
  {
    return "3713bac249ff5edea25dc7f5bbaac80b";
  }

  static const char* value(const N_Robot::PBUTTING_ReadStatus_srv&) { return value(); } 
};

template<>
struct DataType<N_Robot::PBUTTING_ReadStatus_srv> {
  static const char* value() 
  {
    return "N_Robot/PBUTTING_ReadStatus_srv";
  }

  static const char* value(const N_Robot::PBUTTING_ReadStatus_srv&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<N_Robot::PBUTTING_ReadStatus_srvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3713bac249ff5edea25dc7f5bbaac80b";
  }

  static const char* value(const N_Robot::PBUTTING_ReadStatus_srvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<N_Robot::PBUTTING_ReadStatus_srvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "N_Robot/PBUTTING_ReadStatus_srv";
  }

  static const char* value(const N_Robot::PBUTTING_ReadStatus_srvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<N_Robot::PBUTTING_ReadStatus_srvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3713bac249ff5edea25dc7f5bbaac80b";
  }

  static const char* value(const N_Robot::PBUTTING_ReadStatus_srvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<N_Robot::PBUTTING_ReadStatus_srvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "N_Robot/PBUTTING_ReadStatus_srv";
  }

  static const char* value(const N_Robot::PBUTTING_ReadStatus_srvResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // N_ROBOT_SERVICE_PBUTTING_READSTATUS_SRV_H

